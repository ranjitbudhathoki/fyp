// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(uuid())
  githubId              String?        @unique
  username              String?        @unique
  displayName           String?
  bio                   String?
  gender                String?
  preferredGender       String?
  birthDate             DateTime?
  photoUrl              String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime
  posts                 HelpPost[]
  comments              Comment[]
  matches1              Match[]        @relation(name: "user1")
  matches2              Match[]        @relation(name: "user2")
  msgSender             Message[]      @relation(name: "sender")
  questions             MatchPost[]
  likes                 Like[]
  solutions             Solution[]
  senderNotifications   Notification[] @relation("sender-notifications")
  recieverNotifications Notification[] @relation("receiver-notifications")
}

model Admin {
  id           String   @id @default(uuid())
  username     String   @unique
  password     String
  isSuperAdmin Boolean  @default(false)
  createdAt    DateTime @default(now())
}

model HelpPost {
  id           String         @id @default(uuid())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  title        String
  body         String?
  tech_stack   String[]
  project_link String?
  image        String?
  comments     Comment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Notification Notification[] @relation("comment-notifications")
}

model MatchPost {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  body      String
  language  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime
  solutions Solution[]
}

model Solution {
  id            String         @id @default(uuid())
  body          String?
  post          MatchPost      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  imgUrl        String
  createdAt     DateTime       @default(now())
  notifications Notification[] @relation("solution-notifications")
}

model Comment {
  id        String    @id @default(uuid())
  body      String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      HelpPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?
  children  Comment[] @relation("ParentChild")
  createdAt DateTime  @default(now())
  updatedAt DateTime
  likes     Like[]
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}

model Match {
  id        String    @id @default(uuid())
  user1     User      @relation("user1", fields: [userId1], references: [id], onDelete: Cascade)
  userId1   String
  user2     User      @relation("user2", fields: [userId2], references: [id], onDelete: Cascade)
  userId2   String
  unmatched Boolean   @default(false)
  createdAt DateTime  @default(now())
  messages  Message[]

  @@unique([userId1, userId2])
}

model Message {
  id       Int    @id @default(autoincrement())
  match    Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId  String
  sender   User   @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  text      String
  createdAt DateTime @default(now())
}

model Report {
  id         String @id @default(uuid())
  reason     String
  reporterId String
  targetId   String
}

enum NotificationType {
  SEND_SOLUTION
  WARNING
  MATCHED
  NORMAL
  COMMENT
}

model Notification {
  id         String           @id @default(uuid())
  type       NotificationType @default(NORMAL)
  message    String
  read       Boolean          @default(false)
  sender     User?            @relation("sender-notifications", fields: [senderId], references: [id], onDelete: SetNull)
  senderId   String?
  receiver   User             @relation("receiver-notifications", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  solution   Solution?        @relation("solution-notifications", fields: [solutionId], references: [id], onDelete: SetNull)
  solutionId String?
  post       HelpPost?        @relation("comment-notifications", fields: [postId], references: [id], onDelete: SetNull)
  postId     String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

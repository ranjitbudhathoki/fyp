// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(uuid())
  githubId        String?     @unique
  username        String?     @unique
  displayName     String?
  bio             String?
  gender          String?
  preferredGender String?
  birthDate       DateTime?
  photoUrl        String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime
  posts           HelpPost[]
  comments        Comment[]
  matches1        Match[]     @relation(name: "user1")
  matches2        Match[]     @relation(name: "user2")
  msgSender       Message[]   @relation(name: "sender")
  receiver        Message[]   @relation(name: "receiver")
  questions       MatchPost[]
  likes           Like[]
  solutions       Solution[]
}

model Admin {
  id           String   @id @default(uuid())
  username     String   @unique
  password     String
  isSuperAdmin Boolean  @default(false)
  createdAt    DateTime @default(now())
}

model HelpPost {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  title        String
  body         String?
  tech_stack   String[]
  project_link String?
  image        String?
  comments     Comment[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
}

model MatchPost {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  body      String
  createdAt DateTime   @default(now())
  updatedAt DateTime
  solutions Solution[]
}

model Solution {
  id        String    @id @default(uuid())
  body      String?
  post      MatchPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  imgUrl    String
  createdAt DateTime  @default(now())
}

model Comment {
  id        String    @id @default(uuid())
  body      String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      HelpPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?
  children  Comment[] @relation("ParentChild")
  createdAt DateTime  @default(now())
  updatedAt DateTime
  likes     Like[]
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}

model Match {
  id        String    @id @default(uuid())
  user1     User      @relation("user1", fields: [userId1], references: [id], onDelete: Cascade)
  userId1   String
  user2     User      @relation("user2", fields: [userId2], references: [id], onDelete: Cascade)
  userId2   String
  unmatched Boolean   @default(false)
  createdAt DateTime  @default(now())
  messages  Message[]

  @@unique([userId1, userId2])
}

model Message {
  id         Int      @id @default(autoincrement())
  match      Match    @relation(fields: [matchId], references: [id])
  matchId    String
  sender     User     @relation("sender", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  receiverId String
  text       String
  createdAt  DateTime @default(now())
}

model Report {
  id         String @id @default(uuid())
  reason     String
  reporterId String
  targetId   String
}
